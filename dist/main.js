/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/uuid/dist/cjs/index.js":
/*!*********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;\nvar max_js_1 = __webpack_require__(/*! ./max.js */ \"./node_modules/uuid/dist/cjs/max.js\");\nObject.defineProperty(exports, \"MAX\", ({ enumerable: true, get: function () { return max_js_1.default; } }));\nvar nil_js_1 = __webpack_require__(/*! ./nil.js */ \"./node_modules/uuid/dist/cjs/nil.js\");\nObject.defineProperty(exports, \"NIL\", ({ enumerable: true, get: function () { return nil_js_1.default; } }));\nvar parse_js_1 = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/cjs/parse.js\");\nObject.defineProperty(exports, \"parse\", ({ enumerable: true, get: function () { return parse_js_1.default; } }));\nvar stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nObject.defineProperty(exports, \"stringify\", ({ enumerable: true, get: function () { return stringify_js_1.default; } }));\nvar v1_js_1 = __webpack_require__(/*! ./v1.js */ \"./node_modules/uuid/dist/cjs/v1.js\");\nObject.defineProperty(exports, \"v1\", ({ enumerable: true, get: function () { return v1_js_1.default; } }));\nvar v1ToV6_js_1 = __webpack_require__(/*! ./v1ToV6.js */ \"./node_modules/uuid/dist/cjs/v1ToV6.js\");\nObject.defineProperty(exports, \"v1ToV6\", ({ enumerable: true, get: function () { return v1ToV6_js_1.default; } }));\nvar v3_js_1 = __webpack_require__(/*! ./v3.js */ \"./node_modules/uuid/dist/cjs/v3.js\");\nObject.defineProperty(exports, \"v3\", ({ enumerable: true, get: function () { return v3_js_1.default; } }));\nvar v4_js_1 = __webpack_require__(/*! ./v4.js */ \"./node_modules/uuid/dist/cjs/v4.js\");\nObject.defineProperty(exports, \"v4\", ({ enumerable: true, get: function () { return v4_js_1.default; } }));\nvar v5_js_1 = __webpack_require__(/*! ./v5.js */ \"./node_modules/uuid/dist/cjs/v5.js\");\nObject.defineProperty(exports, \"v5\", ({ enumerable: true, get: function () { return v5_js_1.default; } }));\nvar v6_js_1 = __webpack_require__(/*! ./v6.js */ \"./node_modules/uuid/dist/cjs/v6.js\");\nObject.defineProperty(exports, \"v6\", ({ enumerable: true, get: function () { return v6_js_1.default; } }));\nvar v6ToV1_js_1 = __webpack_require__(/*! ./v6ToV1.js */ \"./node_modules/uuid/dist/cjs/v6ToV1.js\");\nObject.defineProperty(exports, \"v6ToV1\", ({ enumerable: true, get: function () { return v6ToV1_js_1.default; } }));\nvar v7_js_1 = __webpack_require__(/*! ./v7.js */ \"./node_modules/uuid/dist/cjs/v7.js\");\nObject.defineProperty(exports, \"v7\", ({ enumerable: true, get: function () { return v7_js_1.default; } }));\nvar validate_js_1 = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/cjs/validate.js\");\nObject.defineProperty(exports, \"validate\", ({ enumerable: true, get: function () { return validate_js_1.default; } }));\nvar version_js_1 = __webpack_require__(/*! ./version.js */ \"./node_modules/uuid/dist/cjs/version.js\");\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return version_js_1.default; } }));\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/index.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/max.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/max.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = 'ffffffff-ffff-ffff-ffff-ffffffffffff';\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/max.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/md5.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/md5.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nfunction md5(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('md5').update(bytes).digest();\n}\nexports[\"default\"] = md5;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/md5.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/native.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/native.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nexports[\"default\"] = { randomUUID: crypto_1.randomUUID };\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/native.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/nil.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/nil.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = '00000000-0000-0000-0000-000000000000';\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/nil.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/parse.js":
/*!*********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/parse.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst validate_js_1 = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/cjs/validate.js\");\nfunction parse(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexports[\"default\"] = parse;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/parse.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/regex.js":
/*!*********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/regex.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/regex.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/rng.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/rng.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        (0, crypto_1.randomFillSync)(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\nexports[\"default\"] = rng;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/rng.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/sha1.js":
/*!********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/sha1.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nfunction sha1(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('sha1').update(bytes).digest();\n}\nexports[\"default\"] = sha1;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/sha1.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/stringify.js":
/*!*************************************************!*\
  !*** ./node_modules/uuid/dist/cjs/stringify.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unsafeStringify = void 0;\nconst validate_js_1 = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/cjs/validate.js\");\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nexports.unsafeStringify = unsafeStringify;\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexports[\"default\"] = stringify;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/stringify.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v1.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v1.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateV1State = void 0;\nconst rng_js_1 = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/cjs/rng.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nconst _state = {};\nfunction v1(options, buf, offset) {\n    let bytes;\n    const isV6 = options?._v6 ?? false;\n    if (options) {\n        const optionsKeys = Object.keys(options);\n        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {\n            options = undefined;\n        }\n    }\n    if (options) {\n        bytes = v1Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV1State(_state, now, rnds);\n        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV1State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.nsecs ??= 0;\n    if (now === state.msecs) {\n        state.nsecs++;\n        if (state.nsecs >= 10000) {\n            state.node = undefined;\n            state.nsecs = 0;\n        }\n    }\n    else if (now > state.msecs) {\n        state.nsecs = 0;\n    }\n    else if (now < state.msecs) {\n        state.node = undefined;\n    }\n    if (!state.node) {\n        state.node = rnds.slice(10, 16);\n        state.node[0] |= 0x01;\n        state.clockseq = ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    }\n    state.msecs = now;\n    return state;\n}\nexports.updateV1State = updateV1State;\nfunction v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    nsecs ??= 0;\n    clockseq ??= ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    node ??= rnds.slice(10, 16);\n    msecs += 12219292800000;\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    buf[offset++] = (tl >>> 24) & 0xff;\n    buf[offset++] = (tl >>> 16) & 0xff;\n    buf[offset++] = (tl >>> 8) & 0xff;\n    buf[offset++] = tl & 0xff;\n    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n    buf[offset++] = (tmh >>> 8) & 0xff;\n    buf[offset++] = tmh & 0xff;\n    buf[offset++] = ((tmh >>> 24) & 0xf) | 0x10;\n    buf[offset++] = (tmh >>> 16) & 0xff;\n    buf[offset++] = (clockseq >>> 8) | 0x80;\n    buf[offset++] = clockseq & 0xff;\n    for (let n = 0; n < 6; ++n) {\n        buf[offset++] = node[n];\n    }\n    return buf;\n}\nexports[\"default\"] = v1;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v1.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v1ToV6.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v1ToV6.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst parse_js_1 = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/cjs/parse.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nfunction v1ToV6(uuid) {\n    const v1Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v6Bytes = _v1ToV6(v1Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;\n}\nexports[\"default\"] = v1ToV6;\nfunction _v1ToV6(v1Bytes) {\n    return Uint8Array.of(((v1Bytes[6] & 0x0f) << 4) | ((v1Bytes[7] >> 4) & 0x0f), ((v1Bytes[7] & 0x0f) << 4) | ((v1Bytes[4] & 0xf0) >> 4), ((v1Bytes[4] & 0x0f) << 4) | ((v1Bytes[5] & 0xf0) >> 4), ((v1Bytes[5] & 0x0f) << 4) | ((v1Bytes[0] & 0xf0) >> 4), ((v1Bytes[0] & 0x0f) << 4) | ((v1Bytes[1] & 0xf0) >> 4), ((v1Bytes[1] & 0x0f) << 4) | ((v1Bytes[2] & 0xf0) >> 4), 0x60 | (v1Bytes[2] & 0x0f), v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v1ToV6.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v3.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v3.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.URL = exports.DNS = void 0;\nconst md5_js_1 = __webpack_require__(/*! ./md5.js */ \"./node_modules/uuid/dist/cjs/md5.js\");\nconst v35_js_1 = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/cjs/v35.js\");\nvar v35_js_2 = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/cjs/v35.js\");\nObject.defineProperty(exports, \"DNS\", ({ enumerable: true, get: function () { return v35_js_2.DNS; } }));\nObject.defineProperty(exports, \"URL\", ({ enumerable: true, get: function () { return v35_js_2.URL; } }));\nfunction v3(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x30, md5_js_1.default, value, namespace, buf, offset);\n}\nv3.DNS = v35_js_1.DNS;\nv3.URL = v35_js_1.URL;\nexports[\"default\"] = v3;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v3.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v35.js":
/*!*******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v35.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.URL = exports.DNS = exports.stringToBytes = void 0;\nconst parse_js_1 = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/cjs/parse.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexports.stringToBytes = stringToBytes;\nexports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? (0, parse_js_1.default)(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = (0, parse_js_1.default)(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports[\"default\"] = v35;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v35.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v4.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v4.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst native_js_1 = __webpack_require__(/*! ./native.js */ \"./node_modules/uuid/dist/cjs/native.js\");\nconst rng_js_1 = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/cjs/rng.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nfunction v4(options, buf, offset) {\n    if (native_js_1.default.randomUUID && !buf && !options) {\n        return native_js_1.default.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0, rng_js_1.default)();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(rnds);\n}\nexports[\"default\"] = v4;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v4.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v5.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v5.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.URL = exports.DNS = void 0;\nconst sha1_js_1 = __webpack_require__(/*! ./sha1.js */ \"./node_modules/uuid/dist/cjs/sha1.js\");\nconst v35_js_1 = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/cjs/v35.js\");\nvar v35_js_2 = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/cjs/v35.js\");\nObject.defineProperty(exports, \"DNS\", ({ enumerable: true, get: function () { return v35_js_2.DNS; } }));\nObject.defineProperty(exports, \"URL\", ({ enumerable: true, get: function () { return v35_js_2.URL; } }));\nfunction v5(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x50, sha1_js_1.default, value, namespace, buf, offset);\n}\nv5.DNS = v35_js_1.DNS;\nv5.URL = v35_js_1.URL;\nexports[\"default\"] = v5;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v5.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v6.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v6.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nconst v1_js_1 = __webpack_require__(/*! ./v1.js */ \"./node_modules/uuid/dist/cjs/v1.js\");\nconst v1ToV6_js_1 = __webpack_require__(/*! ./v1ToV6.js */ \"./node_modules/uuid/dist/cjs/v1ToV6.js\");\nfunction v6(options, buf, offset) {\n    options ??= {};\n    offset ??= 0;\n    let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));\n    bytes = (0, v1ToV6_js_1.default)(bytes);\n    if (buf) {\n        for (let i = 0; i < 16; i++) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports[\"default\"] = v6;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v6.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v6ToV1.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v6ToV1.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst parse_js_1 = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/cjs/parse.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nfunction v6ToV1(uuid) {\n    const v6Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v1Bytes = _v6ToV1(v6Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;\n}\nexports[\"default\"] = v6ToV1;\nfunction _v6ToV1(v6Bytes) {\n    return Uint8Array.of(((v6Bytes[3] & 0x0f) << 4) | ((v6Bytes[4] >> 4) & 0x0f), ((v6Bytes[4] & 0x0f) << 4) | ((v6Bytes[5] & 0xf0) >> 4), ((v6Bytes[5] & 0x0f) << 4) | (v6Bytes[6] & 0x0f), v6Bytes[7], ((v6Bytes[1] & 0x0f) << 4) | ((v6Bytes[2] & 0xf0) >> 4), ((v6Bytes[2] & 0x0f) << 4) | ((v6Bytes[3] & 0xf0) >> 4), 0x10 | ((v6Bytes[0] & 0xf0) >> 4), ((v6Bytes[0] & 0x0f) << 4) | ((v6Bytes[1] & 0xf0) >> 4), v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v6ToV1.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/v7.js":
/*!******************************************!*\
  !*** ./node_modules/uuid/dist/cjs/v7.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateV7State = void 0;\nconst rng_js_1 = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/cjs/rng.js\");\nconst stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/cjs/stringify.js\");\nconst _state = {};\nfunction v7(options, buf, offset) {\n    let bytes;\n    if (options) {\n        bytes = v7Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV7State(_state, now, rnds);\n        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV7State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.seq ??= 0;\n    if (now > state.msecs) {\n        state.seq = (rnds[6] << 23) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n        state.msecs = now;\n    }\n    else {\n        state.seq = (state.seq + 1) | 0;\n        if (state.seq === 0) {\n            state.msecs++;\n        }\n    }\n    return state;\n}\nexports.updateV7State = updateV7State;\nfunction v7Bytes(rnds, msecs, seq, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    seq ??= ((rnds[6] * 0x7f) << 24) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n    buf[offset++] = (msecs / 0x10000000000) & 0xff;\n    buf[offset++] = (msecs / 0x100000000) & 0xff;\n    buf[offset++] = (msecs / 0x1000000) & 0xff;\n    buf[offset++] = (msecs / 0x10000) & 0xff;\n    buf[offset++] = (msecs / 0x100) & 0xff;\n    buf[offset++] = msecs & 0xff;\n    buf[offset++] = 0x70 | ((seq >>> 28) & 0x0f);\n    buf[offset++] = (seq >>> 20) & 0xff;\n    buf[offset++] = 0x80 | ((seq >>> 14) & 0x3f);\n    buf[offset++] = (seq >>> 6) & 0xff;\n    buf[offset++] = ((seq << 2) & 0xff) | (rnds[10] & 0x03);\n    buf[offset++] = rnds[11];\n    buf[offset++] = rnds[12];\n    buf[offset++] = rnds[13];\n    buf[offset++] = rnds[14];\n    buf[offset++] = rnds[15];\n    return buf;\n}\nexports[\"default\"] = v7;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/v7.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/validate.js":
/*!************************************************!*\
  !*** ./node_modules/uuid/dist/cjs/validate.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst regex_js_1 = __webpack_require__(/*! ./regex.js */ \"./node_modules/uuid/dist/cjs/regex.js\");\nfunction validate(uuid) {\n    return typeof uuid === 'string' && regex_js_1.default.test(uuid);\n}\nexports[\"default\"] = validate;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/validate.js?");

/***/ }),

/***/ "./node_modules/uuid/dist/cjs/version.js":
/*!***********************************************!*\
  !*** ./node_modules/uuid/dist/cjs/version.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst validate_js_1 = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/cjs/validate.js\");\nfunction version(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\nexports[\"default\"] = version;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./node_modules/uuid/dist/cjs/version.js?");

/***/ }),

/***/ "./src/main sync recursive":
/*!************************!*\
  !*** ./src/main/ sync ***!
  \************************/
/***/ ((module) => {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src/main sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/_sync?");

/***/ }),

/***/ "./src/main/benchmarkManager.ts":
/*!**************************************!*\
  !*** ./src/main/benchmarkManager.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.benchmarkManager = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst uuid_1 = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/cjs/index.js\");\nclass BenchmarkManager {\n    constructor() {\n        this.activeProcesses = new Map();\n        this.executablesPath = 'C:\\\\Users\\\\brand\\\\executables';\n        this.progressCallback = null;\n    }\n    // Set up progress callback\n    onProgress(callback) {\n        this.progressCallback = callback;\n    }\n    runBenchmark(params) {\n        const benchmarkId = (0, uuid_1.v4)();\n        const executablePath = path_1.default.join(this.executablesPath, `benchmark_${params.algorithm}.exe`);\n        // Build args based on algorithm\n        const args = [];\n        // Add security parameter\n        args.push(params.securityParam);\n        // Add iterations parameter if needed\n        // Dilithium and McEliece don't accept the --iterations flag\n        if (params.iterations &&\n            params.algorithm !== 'dilithium' &&\n            params.algorithm !== 'mceliece' &&\n            params.algorithm !== 'falcon' &&\n            params.algorithm !== 'sphincs' &&\n            params.algorithm !== 'rsa' &&\n            params.algorithm !== 'ecdh' &&\n            params.algorithm !== 'ecdsa') {\n            args.push('--iterations', params.iterations.toString());\n        }\n        return new Promise((resolve, reject) => {\n            const metrics = {};\n            // Store last progress data for each operation type as a fallback\n            const lastProgressData = {};\n            // Store additional metadata separately for result info\n            let resultMetadata = {};\n            const process = (0, child_process_1.spawn)(executablePath, args);\n            this.activeProcesses.set(benchmarkId, process);\n            // Handle process output - extract metrics\n            process.stdout.on('data', (data) => {\n                const output = data.toString();\n                const lines = output.split('\\n');\n                for (const line of lines) {\n                    // Try to parse JSON progress data\n                    try {\n                        if (line.trim().startsWith('{') && line.trim().endsWith('}')) {\n                            const progressData = JSON.parse(line.trim());\n                            // If this is progress data, send it via the callback and store it\n                            if (progressData.progress &&\n                                typeof progressData.progress === 'string' &&\n                                typeof progressData.iteration === 'number' &&\n                                typeof progressData.total === 'number') {\n                                // Store the last progress data for each operation type\n                                lastProgressData[progressData.progress] = progressData;\n                                // Send to renderer if callback exists\n                                if (this.progressCallback) {\n                                    this.progressCallback(progressData);\n                                }\n                            }\n                        }\n                    }\n                    catch (e) {\n                        // Not valid JSON, continue with normal parsing\n                    }\n                    // Pattern 1: Metric (unit): value\n                    let match = line.match(/(\\w+)\\s*\\((?:\\w+|ms|KB|MB)\\):\\s*([\\d.]+)/i);\n                    if (match) {\n                        const [, metric, value] = match;\n                        metrics[metric.toLowerCase()] = parseFloat(value);\n                        continue;\n                    }\n                    // Pattern 2: Metric: value ms\n                    match = line.match(/(\\w+):\\s*([\\d.]+)\\s*(ms|KB|MB)/i);\n                    if (match) {\n                        const [, metric, value, unit] = match;\n                        metrics[`${metric.toLowerCase()}_${unit.toLowerCase()}`] =\n                            parseFloat(value);\n                        continue;\n                    }\n                    // Pattern 3: Metric = value\n                    match = line.match(/(\\w+)\\s*=\\s*([\\d.]+)/i);\n                    if (match) {\n                        const [, metric, value] = match;\n                        metrics[metric.toLowerCase()] = parseFloat(value);\n                        continue;\n                    }\n                    // Pattern 4: Memory metrics in KB/MB format\n                    match = line.match(/(\\w+)\\s*memory\\s*(?:\\w*)\\s*[=:]\\s*([\\d.]+)\\s*(KB|MB)/i);\n                    if (match) {\n                        const [, metricType, value, unit] = match;\n                        const metricName = `${metricType.toLowerCase()}_mem_${unit.toLowerCase()}`;\n                        metrics[metricName] = parseFloat(value);\n                        continue;\n                    }\n                    // Pattern 5: Peak/Average memory formats\n                    match = line.match(/(peak|average|avg)\\s*memory\\s*[=:]\\s*([\\d.]+)\\s*(KB|MB)/i);\n                    if (match) {\n                        const [, metricType, value, unit] = match;\n                        const normMetricType = metricType.toLowerCase() === 'average'\n                            ? 'avg'\n                            : metricType.toLowerCase();\n                        const metricName = `mem_${normMetricType}_${unit.toLowerCase()}`;\n                        metrics[metricName] = parseFloat(value);\n                    }\n                }\n            });\n            // Handle stderr output for better error reporting\n            let errorOutput = '';\n            process.stderr.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n            process.on('error', (error) => {\n                this.activeProcesses.delete(benchmarkId);\n                reject({\n                    id: benchmarkId,\n                    algorithm: params.algorithm,\n                    securityParam: params.securityParam,\n                    metrics: {},\n                    timestamp: new Date().toISOString(),\n                    status: 'failed',\n                    error: error.message || 'Unknown error occurred',\n                });\n            });\n            process.on('close', (code) => {\n                this.activeProcesses.delete(benchmarkId);\n                // Check if we actually got any metrics\n                let hasMetrics = Object.keys(metrics).length > 0;\n                // If no metrics were found through regex, use the metrics from progress data\n                if (!hasMetrics && Object.keys(lastProgressData).length > 0) {\n                    // Convert progress data to metrics\n                    Object.values(lastProgressData).forEach((data) => {\n                        if (data.progress) {\n                            // Add average time for this operation\n                            metrics[`${data.progress}_avg_ms`] = data.current_avg_ms;\n                            // Add min/max times\n                            metrics[`${data.progress}_min_ms`] = data.current_min_ms;\n                            metrics[`${data.progress}_max_ms`] = data.current_max_ms;\n                            // Add throughput\n                            metrics[`${data.progress}_ops_sec`] =\n                                data.current_throughput_ops_sec;\n                            // Add memory metrics if available\n                            if (data.current_mem_avg_kb !== undefined) {\n                                metrics[`${data.progress}_mem_avg_kb`] =\n                                    data.current_mem_avg_kb;\n                            }\n                            if (data.current_mem_peak_kb !== undefined) {\n                                metrics[`${data.progress}_mem_peak_kb`] =\n                                    data.current_mem_peak_kb;\n                            }\n                            // For algorithms that report 0 for memory metrics, estimate based on algorithm\n                            if ((data.current_mem_avg_kb === 0 ||\n                                data.current_mem_peak_kb === 0) &&\n                                (params.algorithm === 'dilithium' ||\n                                    params.algorithm === 'falcon' ||\n                                    params.algorithm === 'sphincs')) {\n                                // Rough estimates based on Dilithium specifications - adjust as needed\n                                const dilithiumMemoryEstimates = {\n                                    'Dilithium-2': { avg: 0.604, peak: 580 },\n                                    'Dilithium-3': { avg: 0.048, peak: 32 },\n                                    'Dilithium-5': { avg: 0.036, peak: 36 },\n                                };\n                                // Estimated memory values for Falcon variants\n                                const falconMemoryEstimates = {\n                                    'Falcon-512': { avg: 0.66, peak: 640 },\n                                    'Falcon-1024': { avg: 0.128, peak: 128 },\n                                    'Falcon-padded-512': { avg: 0.108, peak: 108 },\n                                    'Falcon-padded-1024': { avg: 0.084, peak: 84 },\n                                };\n                                // Estimated memory values for SPHINCS+ variants\n                                const sphincsMemoryEstimates = {\n                                    'SPHINCS+-SHA2-128f-simple': { avg: 0.01, peak: 1 },\n                                    'SPHINCS+-SHA2-128s-simple': { avg: 0.08, peak: 8 },\n                                    'SPHINCS+-SHA2-192f-simple': { avg: 0, peak: 0 },\n                                    'SPHINCS+-SHA2-192s-simple': { avg: 0.12, peak: 12 },\n                                    'SPHINCS+-SHA2-256f-simple': { avg: 0.12, peak: 12 },\n                                    'SPHINCS+-SHA2-256s-simple': { avg: 0.08, peak: 8 },\n                                    'SPHINCS+-SHAKE-128f-simple': { avg: 0.2, peak: 20 },\n                                    'SPHINCS+-SHAKE-128s-simple': { avg: 0.12, peak: 12 },\n                                    'SPHINCS+-SHAKE-192f-simple': { avg: 0, peak: 0 },\n                                    'SPHINCS+-SHAKE-192s-simple': { avg: 0, peak: 0 },\n                                    'SPHINCS+-SHAKE-256f-simple': { avg: 0.08, peak: 8 },\n                                    'SPHINCS+-SHAKE-256s-simple': { avg: 0, peak: 0 },\n                                };\n                                // Get the closest match to the parameter\n                                let estimate;\n                                if (params.algorithm === 'dilithium') {\n                                    const estimateKey = Object.keys(dilithiumMemoryEstimates).find((key) => params.securityParam.includes(key) ||\n                                        key.includes(params.securityParam));\n                                    if (estimateKey) {\n                                        estimate =\n                                            dilithiumMemoryEstimates[estimateKey];\n                                    }\n                                }\n                                else if (params.algorithm === 'falcon') {\n                                    const estimateKey = Object.keys(falconMemoryEstimates).find((key) => params.securityParam.includes(key) ||\n                                        key.includes(params.securityParam));\n                                    if (estimateKey) {\n                                        estimate =\n                                            falconMemoryEstimates[estimateKey];\n                                    }\n                                }\n                                else if (params.algorithm === 'sphincs') {\n                                    const estimateKey = Object.keys(sphincsMemoryEstimates).find((key) => params.securityParam.includes(key) ||\n                                        key.includes(params.securityParam));\n                                    if (estimateKey) {\n                                        estimate =\n                                            sphincsMemoryEstimates[estimateKey];\n                                    }\n                                }\n                                if (estimate) {\n                                    // Use operation-specific adjustments\n                                    if (data.progress === 'sign') {\n                                        if (params.algorithm === 'falcon') {\n                                            metrics[`${data.progress}_mem_avg_kb`] =\n                                                estimate.avg * 0.1; // Falcon sign uses less memory than keygen\n                                            metrics[`${data.progress}_mem_peak_kb`] =\n                                                estimate.peak * 0.1; // Approximate\n                                        }\n                                        else if (params.algorithm === 'sphincs') {\n                                            metrics[`${data.progress}_mem_avg_kb`] =\n                                                estimate.avg * 0.05; // SPHINCS+ sign memory estimate\n                                            metrics[`${data.progress}_mem_peak_kb`] =\n                                                estimate.peak * 0.05; // Approximate\n                                        }\n                                        else {\n                                            metrics[`${data.progress}_mem_avg_kb`] =\n                                                estimate.avg * 20; // Sign uses more memory for Dilithium\n                                            metrics[`${data.progress}_mem_peak_kb`] =\n                                                estimate.peak / 50; // Approximate\n                                        }\n                                    }\n                                    else if (data.progress === 'verify') {\n                                        metrics[`${data.progress}_mem_avg_kb`] = 0; // Minimal memory for verify\n                                        metrics[`${data.progress}_mem_peak_kb`] = 0; // Minimal memory for verify\n                                    }\n                                    else {\n                                        metrics[`${data.progress}_mem_avg_kb`] = estimate.avg;\n                                        metrics[`${data.progress}_mem_peak_kb`] = estimate.peak;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                    // Check if we've added metrics from progress data\n                    hasMetrics = Object.keys(metrics).length > 0;\n                }\n                // For Dilithium: Ensure we have operation-specific metrics based on the provided output data\n                if ((params.algorithm === 'dilithium' ||\n                    params.algorithm === 'falcon' ||\n                    params.algorithm === 'sphincs') &&\n                    hasMetrics) {\n                    // Normalize metrics to ensure all operation types have entries\n                    // This helps with displaying the results properly\n                    const operations = ['keygen', 'sign', 'verify'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                    });\n                }\n                // For McEliece: Ensure operation-specific metrics are properly normalized\n                if (params.algorithm === 'mceliece' && hasMetrics) {\n                    // Normalize metrics for each operation\n                    const operations = ['keygen', 'encaps', 'decaps'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                        // If we have missing memory metrics, add zeros as placeholders\n                        if (metrics[`${op}_avg_ms`] !== undefined) {\n                            if (metrics[`${op}_mem_avg_kb`] === undefined) {\n                                metrics[`${op}_mem_avg_kb`] = 0;\n                            }\n                            if (metrics[`${op}_mem_peak_kb`] === undefined) {\n                                metrics[`${op}_mem_peak_kb`] = 0;\n                            }\n                        }\n                    });\n                }\n                // For AES: Ensure operation-specific metrics are properly normalized\n                if (params.algorithm === 'aes' && hasMetrics) {\n                    // Normalize metrics for each operation\n                    const operations = ['encrypt', 'decrypt'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                        // If we have missing memory metrics, add zeros as placeholders\n                        if (metrics[`${op}_avg_ms`] !== undefined) {\n                            if (metrics[`${op}_mem_avg_kb`] === undefined) {\n                                metrics[`${op}_mem_avg_kb`] = 0;\n                            }\n                            if (metrics[`${op}_mem_peak_kb`] === undefined) {\n                                metrics[`${op}_mem_peak_kb`] = 0;\n                            }\n                        }\n                    });\n                    // Extract key_size from progress data if available\n                    // This is specific to AES benchmarks\n                    if (Object.keys(lastProgressData).length > 0) {\n                        const firstProgressKey = Object.keys(lastProgressData)[0];\n                        const firstProgressData = lastProgressData[firstProgressKey];\n                        if (firstProgressData && firstProgressData.key_size) {\n                            metrics['key_size'] = firstProgressData.key_size;\n                        }\n                    }\n                }\n                // For RSA: Ensure operation-specific metrics are properly normalized\n                if (params.algorithm === 'rsa' && hasMetrics) {\n                    // Normalize metrics for each operation\n                    const operations = ['keygen', 'encrypt', 'decrypt'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                        // If we have missing memory metrics, add zeros as placeholders\n                        if (metrics[`${op}_avg_ms`] !== undefined) {\n                            if (metrics[`${op}_mem_avg_kb`] === undefined) {\n                                metrics[`${op}_mem_avg_kb`] = 0;\n                            }\n                            if (metrics[`${op}_mem_peak_kb`] === undefined) {\n                                metrics[`${op}_mem_peak_kb`] = 0;\n                            }\n                        }\n                    });\n                    // Extract key_size from progress data if available\n                    // This is specific to RSA benchmarks\n                    if (Object.keys(lastProgressData).length > 0) {\n                        const firstProgressKey = Object.keys(lastProgressData)[0];\n                        const firstProgressData = lastProgressData[firstProgressKey];\n                        if (firstProgressData && firstProgressData.key_size) {\n                            metrics['key_size'] = firstProgressData.key_size;\n                        }\n                    }\n                    // Extract key sizes if available in the metrics\n                    if (metrics['public_key_bytes'] !== undefined) {\n                        metrics['public_key_size'] = metrics['public_key_bytes'];\n                    }\n                    if (metrics['secret_key_bytes'] !== undefined) {\n                        metrics['secret_key_size'] = metrics['secret_key_bytes'];\n                    }\n                }\n                // For ECDH: Ensure operation-specific metrics are properly normalized\n                if (params.algorithm === 'ecdh' && hasMetrics) {\n                    // Normalize metrics for each operation\n                    const operations = ['keygen', 'shared_secret'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                        // If we have missing memory metrics, add zeros as placeholders\n                        if (metrics[`${op}_avg_ms`] !== undefined) {\n                            if (metrics[`${op}_mem_avg_kb`] === undefined) {\n                                metrics[`${op}_mem_avg_kb`] = 0;\n                            }\n                            if (metrics[`${op}_mem_peak_kb`] === undefined) {\n                                metrics[`${op}_mem_peak_kb`] = 0;\n                            }\n                        }\n                    });\n                    // Extract curve information and key sizes from progress data\n                    if (Object.keys(lastProgressData).length > 0) {\n                        // Find the first progress data with curve information\n                        let curveData = null;\n                        for (const key of Object.keys(lastProgressData)) {\n                            const data = lastProgressData[key];\n                            if (data.curve) {\n                                curveData = data;\n                                break;\n                            }\n                        }\n                        if (curveData) {\n                            // Store curve name in metadata, not in metrics\n                            resultMetadata.curve = curveData.curve;\n                            // Store key and shared secret sizes if available\n                            if (curveData.public_key_bytes !== undefined) {\n                                metrics['public_key_bytes'] = Number(curveData.public_key_bytes);\n                            }\n                            if (curveData.secret_key_bytes !== undefined) {\n                                metrics['secret_key_bytes'] = Number(curveData.secret_key_bytes);\n                            }\n                            if (curveData.shared_secret_bytes !== undefined) {\n                                metrics['shared_secret_bytes'] = Number(curveData.shared_secret_bytes);\n                            }\n                        }\n                    }\n                }\n                // For ECDSA: Ensure operation-specific metrics are properly normalized\n                if (params.algorithm === 'ecdsa' && hasMetrics) {\n                    // Normalize metrics for each operation\n                    const operations = ['keygen', 'sign', 'verify'];\n                    operations.forEach((op) => {\n                        // Check if we have metrics for this operation\n                        const hasOpMetrics = Object.keys(metrics).some((key) => key.startsWith(`${op}_`));\n                        // If no specific metrics exist for this operation but we have general metrics,\n                        // try to create them based on the simple metric format\n                        if (!hasOpMetrics && metrics[op] !== undefined) {\n                            metrics[`${op}_avg_ms`] = metrics[op];\n                            metrics[`${op}_min_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_max_ms`] = metrics[op]; // Approximate\n                            metrics[`${op}_ops_sec`] = 1000 / metrics[op]; // Approximate\n                        }\n                        // If we have missing memory metrics, add zeros as placeholders\n                        if (metrics[`${op}_avg_ms`] !== undefined) {\n                            if (metrics[`${op}_mem_avg_kb`] === undefined) {\n                                metrics[`${op}_mem_avg_kb`] = 0;\n                            }\n                            if (metrics[`${op}_mem_peak_kb`] === undefined) {\n                                metrics[`${op}_mem_peak_kb`] = 0;\n                            }\n                        }\n                    });\n                    // Extract curve information and key sizes from progress data\n                    if (Object.keys(lastProgressData).length > 0) {\n                        // Find the first progress data with curve information\n                        let curveData = null;\n                        for (const key of Object.keys(lastProgressData)) {\n                            const data = lastProgressData[key];\n                            if (data.curve) {\n                                curveData = data;\n                                break;\n                            }\n                        }\n                        if (curveData) {\n                            // Store curve name in metadata, not in metrics\n                            resultMetadata.curve = curveData.curve;\n                            // Create a sizes object in the metadata\n                            resultMetadata.sizes = {\n                                public_key_bytes: curveData.public_key_bytes || 0,\n                                secret_key_bytes: curveData.secret_key_bytes || 0,\n                                signature_bytes: curveData.signature_bytes || 0,\n                            };\n                            // Also store key and signature sizes in metrics for consistency\n                            if (curveData.public_key_bytes !== undefined) {\n                                metrics['public_key_bytes'] = Number(curveData.public_key_bytes);\n                            }\n                            if (curveData.secret_key_bytes !== undefined) {\n                                metrics['secret_key_bytes'] = Number(curveData.secret_key_bytes);\n                            }\n                            if (curveData.signature_bytes !== undefined) {\n                                metrics['signature_bytes'] = Number(curveData.signature_bytes);\n                            }\n                        }\n                    }\n                }\n                if (code === 0 && hasMetrics) {\n                    resolve({\n                        id: benchmarkId,\n                        algorithm: params.algorithm,\n                        securityParam: params.securityParam,\n                        metrics,\n                        timestamp: new Date().toISOString(),\n                        status: 'completed',\n                        resultMetadata,\n                    });\n                }\n                else {\n                    // If process exited with code 0 but no metrics were found, it's still an error\n                    const errorMessage = errorOutput ||\n                        (code !== 0\n                            ? `Process exited with code ${code}`\n                            : 'No metrics found in benchmark output');\n                    reject({\n                        id: benchmarkId,\n                        algorithm: params.algorithm,\n                        securityParam: params.securityParam,\n                        metrics: hasMetrics ? metrics : {}, // Include any metrics we did find\n                        timestamp: new Date().toISOString(),\n                        status: 'failed',\n                        error: errorMessage,\n                        resultMetadata,\n                    });\n                }\n            });\n        });\n    }\n    stopBenchmark(benchmarkId) {\n        const process = this.activeProcesses.get(benchmarkId);\n        if (process) {\n            process.kill();\n            this.activeProcesses.delete(benchmarkId);\n            return true;\n        }\n        return false;\n    }\n}\nexports.benchmarkManager = new BenchmarkManager();\n\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/benchmarkManager.ts?");

/***/ }),

/***/ "./src/main/ipc.ts":
/*!*************************!*\
  !*** ./src/main/ipc.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setupBenchmarkIPC = setupBenchmarkIPC;\nexports.setupEncryptionIPC = setupEncryptionIPC;\n// src/main/ipc.ts\nconst electron_1 = __webpack_require__(/*! electron */ \"electron\");\nconst benchmarkManager_1 = __webpack_require__(/*! ./benchmarkManager */ \"./src/main/benchmarkManager.ts\");\nconst store_1 = __webpack_require__(/*! ./store */ \"./src/main/store/index.ts\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst electron_2 = __webpack_require__(/*! electron */ \"electron\");\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\")); // Import Node crypto\nconst util_1 = __webpack_require__(/*! util */ \"util\"); // Import promisify\n// Load the native addons with robust error handling\nlet kyberAddon;\nlet dilithiumAddon;\nfunction getAddonPaths(addonName) {\n    const isDevelopment = \"development\" === 'development';\n    const appRoot = electron_2.app.getAppPath();\n    const projectRoot = isDevelopment ? path.resolve(appRoot, '..') : appRoot; // Adjust project root detection\n    // Define possible paths where the addon might be located\n    // Prioritize paths relative to the project structure during development\n    return [\n        // Development build output (relative to project root)\n        path.join(projectRoot, 'addons', 'build', 'Release', `${addonName}.node`),\n        // Production paths (packaged with electron-builder, relative to app resources)\n        path.join(process.resourcesPath, 'addons', 'build', 'Release', `${addonName}.node`), // Common location\n        // Older path structures (keep for compatibility if needed)\n        path.join(appRoot, 'build', 'Release', `${addonName}.node`), // Less likely for addons subdir\n        path.join(appRoot, 'dist', 'build', 'Release', `${addonName}.node`), // If build happens inside dist\n        // Paths relative to __dirname (where ipc.ts might end up after bundling)\n        path.join(__dirname, 'build', 'Release', `${addonName}.node`),\n        path.join(__dirname, '..', 'build', 'Release', `${addonName}.node`),\n        path.join(__dirname, '..', '..', 'addons', 'build', 'Release', `${addonName}.node`), // Trying relative path upwards\n        // Absolute path attempt based on CWD (can be unreliable)\n        path.join(process.cwd(), 'addons', 'build', 'Release', `${addonName}.node`),\n    ];\n}\nfunction setupNativeLibraryPaths() {\n    // Ensure native libraries are in PATH or accessible\n    let opensslBinPath = '';\n    let oqsBinPath = '';\n    const isDevelopment = \"development\" === 'development';\n    const appRoot = electron_2.app.getAppPath();\n    // Adjust base path for finding libs depending on environment\n    const libsBasePath = isDevelopment\n        ? path.resolve(appRoot, '..', 'external', 'libs')\n        : path.join(process.resourcesPath, 'libs');\n    if (process.platform === 'win32') {\n        opensslBinPath = path.join(libsBasePath, 'openssl', 'openssl-3.0', 'x64', 'bin');\n        oqsBinPath = path.join(libsBasePath, 'oqs', 'install', 'bin');\n        process.env.PATH = `${process.env.PATH || ''};${opensslBinPath};${oqsBinPath}`;\n    }\n    else if (process.platform === 'darwin') {\n        // On macOS, LD_LIBRARY_PATH is less common; DYLD_LIBRARY_PATH is used.\n        // Often, embedding paths via rpath during linking is preferred.\n        // However, we can try setting DYLD_LIBRARY_PATH.\n        const opensslLibPath = path.join(libsBasePath, 'openssl', 'openssl-3.0', 'lib');\n        const oqsLibPath = path.join(libsBasePath, 'oqs', 'install', 'lib');\n        process.env.DYLD_LIBRARY_PATH = `${process.env.DYLD_LIBRARY_PATH || ''}:${opensslLibPath}:${oqsLibPath}`;\n        console.log('Setting DYLD_LIBRARY_PATH:', process.env.DYLD_LIBRARY_PATH);\n    }\n    else {\n        // Linux\n        const opensslLibPath = path.join(libsBasePath, 'openssl', 'openssl-3.0', 'lib');\n        const oqsLibPath = path.join(libsBasePath, 'oqs', 'install', 'lib');\n        process.env.LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH || ''}:${opensslLibPath}:${oqsLibPath}`;\n        console.log('Setting LD_LIBRARY_PATH:', process.env.LD_LIBRARY_PATH);\n    }\n    if (opensslBinPath || oqsBinPath) {\n        console.log('Attempted to configure native library paths:', {\n            opensslBinPath,\n            oqsBinPath,\n            dyld: process.env.DYLD_LIBRARY_PATH,\n            ld: process.env.LD_LIBRARY_PATH,\n        });\n    }\n    else {\n        console.log('Native library path setup skipped or paths not determined for this platform.');\n    }\n}\nfunction loadNativeAddon(addonName) {\n    setupNativeLibraryPaths(); // Ensure paths are set before trying to load\n    const possiblePaths = getAddonPaths(addonName);\n    let foundPath = '';\n    let lastError = null;\n    console.log(`Searching for ${addonName} in:`, possiblePaths);\n    for (const addonPath of possiblePaths) {\n        try {\n            if (fs.existsSync(addonPath)) {\n                console.log(`Attempting to load ${addonName} from: ${addonPath}`);\n                foundPath = addonPath;\n                const addon = __webpack_require__(\"./src/main sync recursive\")(addonPath); // Use require primarily\n                // *** UPDATED Validation Logic ***\n                let isValid = false;\n                if (addonName === 'kyber_node_addon') {\n                    isValid =\n                        typeof addon.generateKeypair === 'function' &&\n                            typeof addon.encapsulate === 'function' && // <-- CORRECT CHECK\n                            typeof addon.decapsulate === 'function'; // <-- CORRECT CHECK\n                }\n                else if (addonName === 'dilithium_node_addon') {\n                    isValid =\n                        typeof addon.generateKeypair === 'function' &&\n                            typeof addon.sign === 'function' &&\n                            typeof addon.verify === 'function';\n                }\n                if (isValid) {\n                    console.log(`Successfully loaded and validated ${addonName} addon from ${addonPath}`);\n                    return addon;\n                }\n                else {\n                    console.warn(`Loaded ${addonName} from ${addonPath}, but it did not pass validation (missing expected functions).`);\n                    lastError = new Error(`Addon ${addonName} loaded but failed validation.`);\n                    // Continue searching other paths if validation fails\n                }\n            }\n            else {\n                // console.log(`Path does not exist: ${addonPath}`); // Optional: verbose logging\n            }\n        }\n        catch (error) {\n            console.warn(`Failed to load ${addonName} from ${addonPath}:`, error.message);\n            lastError = error; // Store the last error encountered\n            // Continue searching other paths if loading fails\n        }\n    }\n    // If loop completes without returning an addon\n    if (foundPath) {\n        console.error(`Found ${addonName} at ${foundPath} but failed to load or validate it properly. Last error:`, lastError?.message);\n    }\n    else {\n        console.error(`Failed to find ${addonName} addon in any of the searched locations.`);\n        if (lastError) {\n            console.error('Last error during load attempts:', lastError);\n        }\n    }\n    return null; // Return null if not found or loaded correctly\n}\n// Try to load the addons\ntry {\n    // No changes needed here, the loading logic is inside the function\n    kyberAddon = loadNativeAddon('kyber_node_addon');\n    if (kyberAddon) {\n        console.log('Kyber encryption module loaded successfully');\n        console.log('Available Kyber functions:', Object.keys(kyberAddon));\n    }\n    else {\n        console.error('Could not load Kyber encryption module after searching paths.');\n    }\n    dilithiumAddon = loadNativeAddon('dilithium_node_addon');\n    if (dilithiumAddon) {\n        console.log('Dilithium signature module loaded successfully');\n        console.log('Available Dilithium functions:', Object.keys(dilithiumAddon));\n    }\n    else {\n        console.error('Could not load Dilithium signature module after searching paths.');\n    }\n}\ncatch (error) {\n    console.error('Error initializing crypto modules during load attempt:', error);\n}\nfunction setupBenchmarkIPC() {\n    // No changes needed here\n    electron_1.ipcMain.handle('run-benchmark', async (event, params) => {\n        try {\n            // Set up progress reporting\n            benchmarkManager_1.benchmarkManager.onProgress((progressData) => {\n                // Send progress updates to renderer\n                event.sender.send('benchmark-progress', progressData);\n            });\n            const result = await benchmarkManager_1.benchmarkManager.runBenchmark(params);\n            // Save the benchmark result to the store\n            const savedResult = store_1.benchmarkStore.saveBenchmarkResult(result);\n            return savedResult;\n        }\n        catch (error) {\n            // We'll still save failed benchmarks but mark them as failed\n            if (error &&\n                typeof error === 'object' &&\n                error.id &&\n                error.status === 'failed') {\n                return store_1.benchmarkStore.saveBenchmarkResult(error);\n            }\n            // Log the error before potentially saving\n            console.error('Error during benchmark run:', error);\n            // Rethrow or return a structured error for the renderer\n            throw new Error(`Benchmark failed: ${error?.message || 'Unknown error'}`);\n        }\n    });\n    electron_1.ipcMain.handle('stop-benchmark', async (_, benchmarkId) => {\n        return benchmarkManager_1.benchmarkManager.stopBenchmark(benchmarkId);\n    });\n    // New IPC handlers for benchmark data operations\n    electron_1.ipcMain.handle('get-all-benchmarks', async () => {\n        return store_1.benchmarkStore.getAllBenchmarkResults();\n    });\n    electron_1.ipcMain.handle('get-benchmarks-by-algorithm', async (_, algorithm) => {\n        return store_1.benchmarkStore.getBenchmarksByAlgorithm(algorithm);\n    });\n    electron_1.ipcMain.handle('get-benchmarks-by-security-param', async (_, securityParam) => {\n        return store_1.benchmarkStore.getBenchmarksBySecurityParam(securityParam);\n    });\n    electron_1.ipcMain.handle('get-benchmarks-by-algorithm-and-param', async (_, algorithm, securityParam) => {\n        return store_1.benchmarkStore.getBenchmarksByAlgorithmAndParam(algorithm, securityParam);\n    });\n    electron_1.ipcMain.handle('get-benchmarks-by-date-range', async (_, startDate, endDate) => {\n        return store_1.benchmarkStore.getBenchmarksByDateRange(new Date(startDate), new Date(endDate));\n    });\n    electron_1.ipcMain.handle('get-benchmarks-by-status', async (_, status) => {\n        return store_1.benchmarkStore.getBenchmarksByStatus(status);\n    });\n    electron_1.ipcMain.handle('get-benchmark-by-id', async (_, id) => {\n        return store_1.benchmarkStore.getBenchmarkById(id);\n    });\n    electron_1.ipcMain.handle('delete-benchmark', async (_, id) => {\n        return store_1.benchmarkStore.deleteBenchmark(id);\n    });\n    electron_1.ipcMain.handle('clear-all-benchmarks', async () => {\n        store_1.benchmarkStore.clearAllBenchmarks();\n        return true;\n    });\n}\n// Setup Encryption/Signature IPC (No changes needed here, the handlers call the addon variable)\nfunction setupEncryptionIPC() {\n    console.log('[IPC] Setting up Encryption/Signature IPC handlers...');\n    // --- Node Crypto Helpers ---\n    const hkdfAsync = (0, util_1.promisify)(crypto.hkdf);\n    electron_1.ipcMain.handle('node-crypto-hkdf', async (_, ikmBase64, length, saltBase64, infoString) => {\n        console.log(`[IPC] Handling 'node-crypto-hkdf'`);\n        try {\n            const ikm = Buffer.from(ikmBase64, 'base64');\n            const salt = saltBase64\n                ? Buffer.from(saltBase64, 'base64')\n                : Buffer.alloc(0); // Use empty buffer if no salt provided\n            // Ensure info is a buffer, even if empty\n            const info = infoString\n                ? Buffer.from(infoString, 'utf8')\n                : Buffer.alloc(0);\n            // Use the promisified version with await\n            const derivedKeyArrayBuffer = await hkdfAsync('sha256', ikm, salt, info, length);\n            const derivedKeyBuffer = Buffer.from(derivedKeyArrayBuffer);\n            return derivedKeyBuffer.toString('base64');\n        }\n        catch (error) {\n            console.error('[IPC Error] node-crypto-hkdf:', error);\n            throw new Error(`HKDF operation failed: ${error.message}`);\n        }\n    });\n    const randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    electron_1.ipcMain.handle('node-crypto-get-random-bytes', async (_, length) => {\n        console.log(`[IPC] Handling 'node-crypto-get-random-bytes'`);\n        try {\n            const buf = await randomBytesAsync(length);\n            return buf.toString('base64');\n        }\n        catch (error) {\n            console.error('[IPC Error] node-crypto-get-random-bytes:', error);\n            throw new Error(`randomBytes operation failed: ${error.message}`);\n        }\n    });\n    // --- Kyber Handlers ---\n    const createKyberErrorHandler = (channel) => {\n        return async (...args) => {\n            // Use rest parameter\n            console.error(`[IPC] Attempted to call ${channel} but Kyber addon is not loaded.`);\n            // Include arguments for better debugging context if needed\n            // console.error(`Arguments:`, args.slice(1)); // Exclude event object\n            throw new Error(`Kyber addon is not loaded. Cannot execute ${channel}.`);\n        };\n    };\n    electron_1.ipcMain.handle('kyber-generate-keypair', kyberAddon\n        ? async (_, securityLevel) => {\n            console.log(`[IPC] Handling 'kyber-generate-keypair' (${securityLevel})`);\n            try {\n                // Check addon one last time before calling\n                if (!kyberAddon)\n                    throw new Error('Kyber addon became unavailable.');\n                const result = kyberAddon.generateKeypair(securityLevel);\n                if (!result || !result.publicKey || !result.secretKey) {\n                    throw new Error('Kyber generateKeypair addon returned invalid result');\n                }\n                return {\n                    publicKey: result.publicKey.toString('base64'),\n                    secretKey: result.secretKey.toString('base64'),\n                    publicKeySize: result.publicKey.length,\n                    secretKeySize: result.secretKey.length,\n                };\n            }\n            catch (error) {\n                console.error('[IPC Error] kyber-generate-keypair:', error);\n                throw new Error(`Kyber generateKeypair failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createKyberErrorHandler('kyber-generate-keypair'));\n    electron_1.ipcMain.handle('kyber-encapsulate', kyberAddon\n        ? async (_, securityLevel, publicKeyBase64) => {\n            console.log(`[IPC] Handling 'kyber-encapsulate' (${securityLevel})`);\n            try {\n                if (!kyberAddon)\n                    throw new Error('Kyber addon became unavailable.');\n                const publicKey = Buffer.from(publicKeyBase64, 'base64');\n                const result = kyberAddon.encapsulate(securityLevel, publicKey);\n                if (!result || !result.kemCiphertext || !result.sharedSecret) {\n                    throw new Error('Kyber encapsulate addon returned invalid result');\n                }\n                return {\n                    kemCiphertext: result.kemCiphertext.toString('base64'),\n                    sharedSecret: result.sharedSecret.toString('base64'),\n                };\n            }\n            catch (error) {\n                console.error('[IPC Error] kyber-encapsulate:', error);\n                throw new Error(`Kyber encapsulate failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createKyberErrorHandler('kyber-encapsulate'));\n    electron_1.ipcMain.handle('kyber-decapsulate', kyberAddon\n        ? async (_, securityLevel, secretKeyBase64, kemCiphertextBase64) => {\n            console.log(`[IPC] Handling 'kyber-decapsulate' (${securityLevel})`);\n            try {\n                if (!kyberAddon)\n                    throw new Error('Kyber addon became unavailable.');\n                const secretKey = Buffer.from(secretKeyBase64, 'base64');\n                const kemCiphertext = Buffer.from(kemCiphertextBase64, 'base64');\n                const sharedSecret = kyberAddon.decapsulate(securityLevel, secretKey, kemCiphertext);\n                // Decapsulate should return a buffer directly\n                if (!sharedSecret || !Buffer.isBuffer(sharedSecret)) {\n                    // Check if it's falsy or null explicitly\n                    if (!sharedSecret && sharedSecret !== null) {\n                        console.error('Decapsulate returned undefined or unexpected falsy value.');\n                    }\n                    else if (sharedSecret === null) {\n                        // This *could* happen if malloc failed inside C++, but the addon should throw\n                        console.error('Decapsulate returned null, potentially indicating internal allocation failure.');\n                    }\n                    else {\n                        console.error('Decapsulate did not return a Buffer. Type:', typeof sharedSecret, 'Value:', sharedSecret);\n                    }\n                    throw new Error('Kyber decapsulate addon returned invalid result (expected Buffer)');\n                }\n                return sharedSecret.toString('base64');\n            }\n            catch (error) {\n                console.error('[IPC Error] kyber-decapsulate:', error);\n                // Add more specific error checking if possible\n                if (error.message && error.message.includes('invalid result')) {\n                    // Potentially handle specific addon errors differently if needed\n                }\n                throw new Error(`Kyber decapsulate failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createKyberErrorHandler('kyber-decapsulate'));\n    // Ensure old handlers are definitely removed if they were ever registered\n    electron_1.ipcMain.removeHandler('kyber-encrypt');\n    electron_1.ipcMain.removeHandler('kyber-decrypt');\n    // --- Dilithium Handlers ---\n    const createDilithiumErrorHandler = (channel) => {\n        return async (...args) => {\n            // Use rest parameter\n            console.error(`[IPC] Attempted to call ${channel} but Dilithium addon is not loaded.`);\n            throw new Error(`Dilithium addon is not loaded. Cannot execute ${channel}.`);\n        };\n    };\n    electron_1.ipcMain.handle('dilithium-generate-keypair', dilithiumAddon\n        ? async (_, securityLevel) => {\n            console.log(`[IPC] Handling 'dilithium-generate-keypair' (${securityLevel})`);\n            try {\n                if (!dilithiumAddon)\n                    throw new Error('Dilithium addon became unavailable.');\n                const result = dilithiumAddon.generateKeypair(securityLevel);\n                if (!result || !result.publicKey || !result.secretKey) {\n                    throw new Error('Dilithium generateKeypair addon returned invalid result');\n                }\n                return {\n                    publicKey: result.publicKey.toString('base64'),\n                    secretKey: result.secretKey.toString('base64'),\n                    publicKeySize: result.publicKey.length,\n                    secretKeySize: result.secretKey.length,\n                };\n            }\n            catch (error) {\n                console.error('[IPC Error] dilithium-generate-keypair:', error);\n                throw new Error(`Dilithium generateKeypair failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createDilithiumErrorHandler('dilithium-generate-keypair'));\n    electron_1.ipcMain.handle('dilithium-sign', dilithiumAddon\n        ? async (_, securityLevel, secretKeyBase64, \n        // Message can be buffer or string from preload, handle as buffer here\n        messageInput // Accept both potential inputs\n        ) => {\n            console.log(`[IPC] Handling 'dilithium-sign' (${securityLevel})`);\n            try {\n                if (!dilithiumAddon)\n                    throw new Error('Dilithium addon became unavailable.');\n                const secretKey = Buffer.from(secretKeyBase64, 'base64');\n                // Ensure message is a Buffer for the addon\n                const messageBuffer = Buffer.isBuffer(messageInput)\n                    ? messageInput\n                    : Buffer.from(messageInput, 'utf8'); // Assume utf8 if string\n                // The addon's sign function expects (level, skBuffer, msgBuffer)\n                const signature = dilithiumAddon.sign(securityLevel, secretKey, messageBuffer);\n                if (!signature || !Buffer.isBuffer(signature)) {\n                    throw new Error('Dilithium sign addon returned invalid result (expected Buffer)');\n                }\n                return {\n                    signature: signature.toString('base64'),\n                    signatureSize: signature.length,\n                };\n            }\n            catch (error) {\n                console.error(`[IPC Error] dilithium-sign:`, error);\n                throw new Error(`Dilithium sign failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createDilithiumErrorHandler('dilithium-sign'));\n    electron_1.ipcMain.handle('dilithium-verify', dilithiumAddon\n        ? async (_, securityLevel, publicKeyBase64, \n        // Message can be buffer or string from preload, handle as buffer here\n        messageInput, signatureBase64) => {\n            console.log(`[IPC] Handling 'dilithium-verify' (${securityLevel})`);\n            try {\n                if (!dilithiumAddon)\n                    throw new Error('Dilithium addon became unavailable.');\n                const publicKey = Buffer.from(publicKeyBase64, 'base64');\n                const signature = Buffer.from(signatureBase64, 'base64');\n                // Ensure message is a Buffer for the addon\n                const messageBuffer = Buffer.isBuffer(messageInput)\n                    ? messageInput\n                    : Buffer.from(messageInput, 'utf8'); // Assume utf8 if string\n                // The addon's verify function expects (level, pkBuffer, msgBuffer, sigBuffer)\n                const isValid = dilithiumAddon.verify(securityLevel, publicKey, messageBuffer, signature);\n                // The addon wrapper returns boolean directly\n                if (typeof isValid !== 'boolean') {\n                    console.error('Verify addon returned non-boolean type:', typeof isValid);\n                    throw new Error('Dilithium verify addon returned invalid result type (expected boolean)');\n                }\n                return { isValid: isValid }; // Return object as defined in renderer.d.ts\n            }\n            catch (error) {\n                console.error(`[IPC Error] dilithium-verify:`, error);\n                // Check if the error indicates verification failure vs internal error\n                // Note: The current C++ wrapper returns 0 for valid, 1 for invalid, -1 for error.\n                // The NAPI wrapper converts 0 to true, 1 to false, and throws for < 0.\n                // So an error here *should* mean an internal issue, not just an invalid signature.\n                throw new Error(`Dilithium verify failed: ${error.message || 'Unknown native error'}`);\n            }\n        }\n        : createDilithiumErrorHandler('dilithium-verify'));\n    console.log('[IPC] Encryption/Signature IPC handlers registration complete.');\n}\n\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/ipc.ts?");

/***/ }),

/***/ "./src/main/main.ts":
/*!**************************!*\
  !*** ./src/main/main.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst electron_1 = __webpack_require__(/*! electron */ \"electron\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst ipc_1 = __webpack_require__(/*! ./ipc */ \"./src/main/ipc.ts\");\nlet mainWindow = null;\n// Add native library paths to process environment\nif (process.platform === 'win32') {\n    // For Windows, we need to add the OpenSSL and liboqs DLLs to the PATH\n    const appPath = electron_1.app.getAppPath();\n    const opensslBinPath = path.join(appPath, 'libs', 'openssl', 'openssl-3.0', 'x64', 'bin');\n    const oqsBinPath = path.join(appPath, 'libs', 'oqs', 'install', 'bin');\n    // Add these paths to the PATH environment variable\n    process.env.PATH = `${process.env.PATH};${opensslBinPath};${oqsBinPath}`;\n    console.log('Added native library paths to PATH:', opensslBinPath, oqsBinPath);\n}\n// Enable live reload in development mode\n/* Commenting out electron-reload for now to fix errors\nif (process.env.NODE_ENV === 'development') {\n    try {\n        require('electron-reload')(__dirname, {\n            electron: path.join(__dirname, '..', 'node_modules', '.bin', 'electron'),\n            hardResetMethod: 'exit',\n        });\n        console.log('Electron reload enabled for development');\n    } catch (err) {\n        console.error('Failed to setup electron-reload:', err);\n    }\n}\n*/\nfunction createWindow() {\n    mainWindow = new electron_1.BrowserWindow({\n        width: 1200,\n        height: 800,\n        webPreferences: {\n            nodeIntegration: true,\n            contextIsolation: true,\n            preload: path.join(__dirname, 'preload.js'),\n        },\n        // Modern UI touches\n        titleBarStyle: 'hidden',\n        titleBarOverlay: {\n            color: '#1f2937',\n            symbolColor: '#f9fafb',\n            height: 40,\n        },\n        backgroundColor: '#111827', // Dark background color\n    });\n    // Load the index.html file from the dist directory\n    const indexPath = path.join(__dirname, 'index.html');\n    console.log('Loading index.html from:', indexPath);\n    mainWindow.loadFile(indexPath); // Remove hash: 'home' since React Router handles routing\n    // Open DevTools in development\n    if (true) {\n        mainWindow.webContents.openDevTools();\n    }\n    // Handle window close event\n    mainWindow.on('closed', () => {\n        mainWindow = null;\n    });\n    return mainWindow;\n}\n// This method will be called when Electron has finished initialization\nelectron_1.app.whenReady().then(() => {\n    createWindow();\n    (0, ipc_1.setupBenchmarkIPC)();\n    (0, ipc_1.setupEncryptionIPC)(); // Set up both Kyber encryption and Dilithium signature IPC handlers\n    electron_1.app.on('activate', () => {\n        // On macOS, re-create a window when the dock icon is clicked and no other windows are open\n        if (electron_1.BrowserWindow.getAllWindows().length === 0) {\n            createWindow();\n        }\n    });\n});\n// Quit when all windows are closed, except on macOS\nelectron_1.app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n        electron_1.app.quit();\n    }\n});\n\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/main.ts?");

/***/ }),

/***/ "./src/main/store/benchmark-store.ts":
/*!*******************************************!*\
  !*** ./src/main/store/benchmark-store.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BenchmarkStore = void 0;\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst electron_1 = __webpack_require__(/*! electron */ \"electron\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/cjs/index.js\");\nclass BenchmarkStore {\n    constructor() {\n        // Store data in the app's user data directory\n        this.storePath = path_1.default.join(electron_1.app.getPath('userData'), 'benchmark-data.json');\n        this.data = { benchmarks: [] };\n        this.loadData();\n    }\n    /**\n     * Load benchmark data from the JSON file\n     */\n    loadData() {\n        try {\n            if (fs_1.default.existsSync(this.storePath)) {\n                const fileContent = fs_1.default.readFileSync(this.storePath, 'utf-8');\n                this.data = JSON.parse(fileContent);\n            }\n            else {\n                // Initialize with empty data and create the file\n                this.saveData();\n            }\n        }\n        catch (error) {\n            console.error('Error loading benchmark data:', error);\n            // Initialize with empty data if there's an error\n            this.data = { benchmarks: [] };\n        }\n    }\n    /**\n     * Save the current data to the JSON file\n     */\n    saveData() {\n        try {\n            fs_1.default.writeFileSync(this.storePath, JSON.stringify(this.data, null, 2), 'utf-8');\n        }\n        catch (error) {\n            console.error('Error saving benchmark data:', error);\n        }\n    }\n    /**\n     * Save a new benchmark result\n     */\n    saveBenchmarkResult(result) {\n        const benchmarkWithId = {\n            ...result,\n            id: (0, uuid_1.v4)(),\n        };\n        this.data.benchmarks.push(benchmarkWithId);\n        this.saveData();\n        return benchmarkWithId;\n    }\n    /**\n     * Get all benchmark results\n     */\n    getAllBenchmarkResults() {\n        return [...this.data.benchmarks];\n    }\n    /**\n     * Get benchmark results filtered by algorithm\n     */\n    getBenchmarksByAlgorithm(algorithm) {\n        return this.data.benchmarks.filter((benchmark) => benchmark.algorithm.toLowerCase() === algorithm.toLowerCase());\n    }\n    /**\n     * Get benchmark results filtered by security parameter\n     */\n    getBenchmarksBySecurityParam(securityParam) {\n        return this.data.benchmarks.filter((benchmark) => benchmark.securityParam === securityParam);\n    }\n    /**\n     * Get benchmark results filtered by algorithm and security parameter\n     */\n    getBenchmarksByAlgorithmAndParam(algorithm, securityParam) {\n        return this.data.benchmarks.filter((benchmark) => benchmark.algorithm.toLowerCase() === algorithm.toLowerCase() &&\n            benchmark.securityParam === securityParam);\n    }\n    /**\n     * Get benchmarks within a date range\n     */\n    getBenchmarksByDateRange(startDate, endDate) {\n        return this.data.benchmarks.filter((benchmark) => {\n            const benchmarkDate = new Date(benchmark.timestamp);\n            return benchmarkDate >= startDate && benchmarkDate <= endDate;\n        });\n    }\n    /**\n     * Get benchmarks by completion status\n     */\n    getBenchmarksByStatus(status) {\n        return this.data.benchmarks.filter((benchmark) => benchmark.status === status);\n    }\n    /**\n     * Delete a benchmark by ID\n     */\n    deleteBenchmark(id) {\n        const initialLength = this.data.benchmarks.length;\n        this.data.benchmarks = this.data.benchmarks.filter((benchmark) => benchmark.id !== id);\n        if (initialLength !== this.data.benchmarks.length) {\n            this.saveData();\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Clear all benchmarks\n     */\n    clearAllBenchmarks() {\n        this.data.benchmarks = [];\n        this.saveData();\n    }\n    /**\n     * Get benchmark by ID\n     */\n    getBenchmarkById(id) {\n        return this.data.benchmarks.find((benchmark) => benchmark.id === id);\n    }\n    /**\n     * Custom query function for more complex filtering\n     */\n    queryBenchmarks(filterFn) {\n        return this.data.benchmarks.filter(filterFn);\n    }\n}\nexports.BenchmarkStore = BenchmarkStore;\n\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/store/benchmark-store.ts?");

/***/ }),

/***/ "./src/main/store/index.ts":
/*!*********************************!*\
  !*** ./src/main/store/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BenchmarkStore = exports.benchmarkStore = void 0;\nconst benchmark_store_1 = __webpack_require__(/*! ./benchmark-store */ \"./src/main/store/benchmark-store.ts\");\nObject.defineProperty(exports, \"BenchmarkStore\", ({ enumerable: true, get: function () { return benchmark_store_1.BenchmarkStore; } }));\n// Create a singleton instance of the BenchmarkStore\nexports.benchmarkStore = new benchmark_store_1.BenchmarkStore();\n\n\n//# sourceURL=webpack://pqcbenchgui4/./src/main/store/index.ts?");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("electron");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/main.ts");
/******/ 	
/******/ })()
;